{"version":3,"sources":["components/button/button.js","components/counter/counter.js","components/profile/profile.js","components/post/select/select.js","components/post/media/media.js","components/post/post.js","components/posts/posts.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","color","onClick","label","Counter","amount","type","Profile","src","img","alt","href","target","rel","name","followers","Select","value","onChange","options","map","key","Media","isVideo","ratio","waves","getMedia","twoDigits","number","Post","media","optionList","i","length","push","state","selectedValue","likes","onOptionChange","bind","nextProps","this","source","setState","e","select","node","str","string","substr","concat","reduceString","undefined","UNIX_timestamp","d","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","React","Component","Posts","postsRow1","postsRow2","postsRow3","size","md","getData","request","Request","document","getElementById","fetch","then","response","json","data","ReactDOM","render","App","placeholder","id","lg","sm","style","marginTop","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d566c6f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css'\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <button\r\n            className={\"button \" + props.color}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.label}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport './counter.css'\r\n\r\nfunction Counter(props) {\r\n    return <p className={props.className}>{props.amount} {props.type}</p>;\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport './profile.css'\r\nimport {MDBCard} from \"mdbreact\";\r\nimport Counter from \"../counter/counter\";\r\n\r\nfunction Profile(props) {\r\n    return (\r\n        <MDBCard className=\"profile\">\r\n            <div>\r\n                <img className=\"pic\" src={props.img} alt=\"Profile\"/>\r\n                <a href={props.img} target=\"_blank\" rel=\"noopener noreferrer\">Descargar</a>\r\n            </div>\r\n            <div className=\"name\">\r\n                <h4>{props.name}</h4>\r\n            </div>\r\n            <Counter amount={props.followers} type=\"Seguidores\"/>\r\n        </MDBCard>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport './select.css'\r\n\r\nfunction Select(props) {\r\n    return (\r\n        <select className=\"select\" value={props.value} onChange={props.onChange}>\r\n            {props.options.map(options => (\r\n                <option key={options} value={options}>\r\n                    {options + 1}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default Select;","import React from 'react';\r\nimport {MDBCardImage, MDBCardVideo} from \"mdbreact\";\r\n\r\nfunction Media(props) {\r\n    if (props.isVideo)\r\n        return (\r\n            <MDBCardVideo\r\n                src={props.src}\r\n                ratio={\"1by1\"}\r\n            />\r\n        );\r\n    else\r\n        return (\r\n            <MDBCardImage\r\n                className={props.className}\r\n                src={props.src}\r\n                waves\r\n            />\r\n        );\r\n}\r\n\r\nexport default Media;\r\n","import React from 'react';\r\nimport './post.css'\r\nimport {MDBCard, MDBCardBody} from \"mdbreact\";\r\nimport Select from \"./select/select\";\r\nimport Media from \"./media/media\";\r\nimport Counter from \"../counter/counter\";\r\n\r\nclass Post extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let media = []\r\n        let optionList = []\r\n        let isVideo = []\r\n        if (this.props.src['__typename'] === 'GraphSidecar') {\r\n            for (let i = 0; i < this.props.src['edge_sidecar_to_children']['edges'].length; i++) {\r\n                media.push(getMedia(this.props.src['edge_sidecar_to_children']['edges'][i]['node']))\r\n                isVideo.push(this.props.src['edge_sidecar_to_children']['edges'][i]['node']['is_video'])\r\n                optionList.push(i)\r\n            }\r\n\r\n        } else {\r\n            media.push(getMedia(this.props.src))\r\n            isVideo.push(this.props.src['is_video'])\r\n        }\r\n\r\n        this.state = {\r\n            selectedValue: \"0\",\r\n            optionList: optionList,\r\n            media: media,\r\n            isVideo: isVideo,\r\n            likes: this.props.src['edge_liked_by']['count']\r\n        };\r\n\r\n        this.onOptionChange = this.onOptionChange.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.src !== this.state.source) {\r\n            let media = []\r\n            let optionList = []\r\n            let isVideo = []\r\n            if (nextProps.src['__typename'] === 'GraphSidecar') {\r\n                for (let i = 0; i < nextProps.src['edge_sidecar_to_children']['edges'].length; i++) {\r\n                    media.push(getMedia(nextProps.src['edge_sidecar_to_children']['edges'][i]['node']))\r\n                    isVideo.push(nextProps.src['edge_sidecar_to_children']['edges'][i]['node']['is_video'])\r\n                    optionList.push(i)\r\n                }\r\n\r\n            } else {\r\n                media.push(getMedia(nextProps.src))\r\n                isVideo.push(nextProps.src['is_video'])\r\n            }\r\n\r\n            this.setState({selectedValue: \"0\"});\r\n            this.setState({optionList: optionList});\r\n            this.setState({media: media});\r\n            this.setState({isVideo: isVideo});\r\n            this.setState({likes: nextProps.src['edge_liked_by']['count']})\r\n\r\n        }\r\n    }\r\n\r\n    onOptionChange(e) {\r\n        this.setState({selectedValue: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        const {selectedValue, optionList, media, isVideo, likes} = this.state;\r\n        let source = this.props.src;\r\n\r\n        let select\r\n        if (source['__typename'] === 'GraphSidecar')\r\n            select = <Select onChange={this.onOptionChange} value={selectedValue} options={optionList}/>\r\n\r\n        return (\r\n            <MDBCard className=\"mdbcard post-card w100\">\r\n                <Media className=\"img\" src={media[selectedValue]} isVideo={isVideo[selectedValue]}/>\r\n                {select}\r\n                <a href={media[selectedValue]} target=\"_blank\" rel=\"noopener noreferrer\">Descargar</a>\r\n                <MDBCardBody>{reduceString(text(source['edge_media_to_caption']['edges'][0]))}</MDBCardBody>\r\n                <Counter className=\"red-color\" type=\"Me gusta\" amount={likes}/>\r\n                <p>{timeConverter(source['taken_at_timestamp'])}</p>\r\n            </MDBCard>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getMedia(src) {\r\n    if (src['is_video'])\r\n        return src['video_url']\r\n\r\n    return src['display_url']\r\n}\r\n\r\nfunction timeConverter(UNIX_timestamp) {\r\n    let d = new Date(UNIX_timestamp * 1000);\r\n    let months = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];\r\n    let year = d.getFullYear();\r\n    let month = months[d.getMonth()];\r\n    let date = d.getDate();\r\n    let hour = twoDigits(d.getHours());\r\n    let min = twoDigits(d.getMinutes());\r\n    let sec = twoDigits(d.getSeconds());\r\n    return date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\r\n}\r\n\r\nfunction twoDigits(number) {\r\n    if (number === 0)\r\n        return \"00\"\r\n\r\n    if (number < 10)\r\n        return \"0\" + number\r\n\r\n    return number\r\n}\r\n\r\nfunction text(node) {\r\n    if (node === undefined)\r\n        return \"\"\r\n\r\n    return node['node']['text'];\r\n}\r\n\r\nfunction reduceString(str) {\r\n    let string = str;\r\n    if (str.length > 100) {\r\n        string = str.substr(0, 100).concat(\"...\");\r\n    }\r\n\r\n    return string;\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {MDBRow, MDBCol} from \"mdbreact\";\r\nimport Post from \"../post/post\";\r\n\r\nexport default class Posts extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            source: this.props.src\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.src !== this.state.source) {\r\n            this.setState({source: nextProps.src});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {source} = this.state;\r\n\r\n        let postsRow1 = [], postsRow2 = [], postsRow3 = []\r\n        for (let i = 0; i < source.length; i++) {\r\n            if (i < 4) {\r\n                postsRow1.push(\r\n                    <MDBCol size=\"12\" md=\"3\" className=\"align-center\">\r\n                        <Post src={source[i]['node']}/>\r\n                    </MDBCol>\r\n                )\r\n            } else if (i < 8) {\r\n                postsRow2.push(\r\n                    <MDBCol size=\"12\" md=\"3\" className=\"align-center\">\r\n                        <Post src={source[i]['node']}/>\r\n                    </MDBCol>\r\n                )\r\n            } else {\r\n                postsRow3.push(\r\n                    <MDBCol size=\"12\" md=\"3\" className=\"align-center\">\r\n                        <Post src={source[i]['node']}/>\r\n                    </MDBCol>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <MDBRow>\r\n                    {postsRow1}\r\n                </MDBRow>\r\n                <MDBRow>\r\n                    {postsRow2}\r\n                </MDBRow>\r\n                <MDBRow>\r\n                    {postsRow3}\r\n                </MDBRow>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './input.css'\nimport Button from './components/button/button.js'\nimport Profile from \"./components/profile/profile\";\nimport Posts from \"./components/posts/posts\";\nimport {MDBRow, MDBCol, MDBContainer} from \"mdbreact\";\n\n\nfunction App() {\n    return (\n        <div>\n            <nav className=\"align-center\">\n                <input type=\"text\" placeholder=\"Nombre de usuario\" className=\"input\" id=\"username\"/>\n                <Button color=\"blue-btn\" label=\"Obtener\" onClick={getData}/>\n            </nav>\n\n            <MDBContainer>\n                <MDBRow>\n                    <MDBCol size=\"12\" lg=\"4\" id=\"profile\" className=\"align-center\"/>\n                    <MDBCol size=\"12\" sm=\"6\" lg=\"8\" id=\"biography\" style={{marginTop: \"2rem\"}}/>\n                </MDBRow>\n            </MDBContainer>\n\n            <MDBContainer id=\"posts\" style={{marginTop: \"3rem\"}}>\n                <p>Introduce el nombre de la cuenta de Instagram que deseas buscar</p>\n            </MDBContainer>\n\n        </div>\n    );\n}\n\nfunction getData() {\n    let request = new Request('https://www.instagram.com/' + document.getElementById(\"username\").value + '/?__a=1');\n\n    fetch(request)\n        .then(response => response.json())\n        .then(data => {\n                ReactDOM.render(\n                    <Profile name={data['graphql']['user']['full_name']}\n                             img={data['graphql']['user']['profile_pic_url_hd']}\n                             followers={data['graphql']['user']['edge_followed_by']['count']}/>,\n                    document.getElementById(\"profile\")\n                );\n\n                ReactDOM.render(\n                    <p>{data['graphql']['user']['biography']}</p>,\n                    document.getElementById(\"biography\")\n                );\n\n                if (data['graphql']['user']['is_private']) {\n                    ReactDOM.render(\n                        <p>La cuenta es privada</p>,\n                        document.getElementById(\"posts\")\n                    );\n                } else {\n                    ReactDOM.render(<>\n                            <h1>Últimas 12 publicaciones</h1>\n                            <Posts\n                                src={data['graphql']['user']['edge_owner_to_timeline_media']['edges']}\n                            />\n                        </>,\n                        document.getElementById(\"posts\")\n                    );\n                }\n            }\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}